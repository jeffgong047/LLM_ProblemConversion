{"story_id": 226, "example_id": 640, "conclusion": "William Dickinson did not get a seat in the Parliament.", "premises": ["William Dickinson was a British politician who sat in the House of Commons", "William Dickinson attended Westminster school for high school and then the University of Edinburgh.", "The University of Edinburgh is a university located in the United Kingdom.", "William Dickinson supported the Portland Whigs.", "People who supported the Portland Whigs did not get a seat in the Parliament."], "premises-FOL": ["BritishPolitician(williamdickinson) ∧ SatInHouseOfCommons(williamdickinson)", "Attended(williamdickinson, westminster) ∧ Highschool(westminster) ∧ Attended(williamdickinson, universityofedinburgh)", "LocatedIn(universityofedinburgh, unitedkingdom) ∧ University(universityofedinburgh)", "Supported(williamdickinson, portlandwhigs)", "∀x (Supported(x, portlandwhigs) → ¬SeatInParliament(x))"], "label": "True", "source": "wiki"}
{"story_id": 226, "example_id": 641, "conclusion": "William Dickinson went to schools located in the United Kingdom for both high school and university.", "premises": ["William Dickinson was a British politician who sat in the House of Commons", "William Dickinson attended Westminster school for high school and then the University of Edinburgh.", "The University of Edinburgh is a university located in the United Kingdom.", "William Dickinson supported the Portland Whigs.", "People who supported the Portland Whigs did not get a seat in the Parliament."], "premises-FOL": ["BritishPolitician(williamdickinson) ∧ SatInHouseOfCommons(williamdickinson)", "Attended(williamdickinson, westminster) ∧ Highschool(westminster) ∧ Attended(williamdickinson, universityofedinburgh)", "LocatedIn(universityofedinburgh, unitedkingdom) ∧ University(universityofedinburgh)", "Supported(williamdickinson, portlandwhigs)", "∀x (Supported(x, portlandwhigs) → ¬SeatInParliament(x))"], "label": "Unknown", "source": "wiki"}
{"story_id": 226, "example_id": 643, "conclusion": "William Dickinson sat in the House of Commons.", "premises": ["William Dickinson was a British politician who sat in the House of Commons", "William Dickinson attended Westminster school for high school and then the University of Edinburgh.", "The University of Edinburgh is a university located in the United Kingdom.", "William Dickinson supported the Portland Whigs.", "People who supported the Portland Whigs did not get a seat in the Parliament."], "premises-FOL": ["BritishPolitician(williamdickinson) ∧ SatInHouseOfCommons(williamdickinson)", "Attended(williamdickinson, westminster) ∧ Highschool(westminster) ∧ Attended(williamdickinson, universityofedinburgh)", "LocatedIn(universityofedinburgh, unitedkingdom) ∧ University(universityofedinburgh)", "Supported(williamdickinson, portlandwhigs)", "∀x (Supported(x, portlandwhigs) → ¬SeatInParliament(x))"], "label": "True", "source": "wiki"}
{"story_id": 82, "example_id": 252, "conclusion": "Tom is a citizen of Washington.", "premises": ["Lawton Park is a neighbourhood in Seattle. ", "All citizens of Lawton Park use the zip code 98199. ", "Tom is a citizen of Lawton Park.", "Daniel uses the zip code 98199. "], "premises-FOL": ["Neighbourhoodin(lawtonPark, seattle)", "∀x (Citizenof(x, lawtonPark) → Usezipcode(x, number98199))", "Citizenof(tom, lawtonPark)", "Usezipcode(daniel, number98199)"], "label": "Unknown", "source": "wiki"}
{"story_id": 171, "example_id": 496, "conclusion": "If you step on a stonefish and apply heat to the affected area, stings will cause death.", "premises": ["Some fish may sting.", "Stonefish is a fish.", "It stings to step on a stonefish.", "Stonefish stings cause death if not treated.", "To treat stonefish stings, apply heat to the affected area or use an antivenom."], "premises-FOL": ["∃x ∃y (Fish(x) → Sting(x,y))", "Fish(stonefish)", "∀x (StepOn(stonefish, x) → Sting(stonefish, x))", "∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeath(x))", "∀x (Sting(stonefish, x) ∧ (ApplyHeat(x) ∨ UseAntivenom(x)) → Treated(x))"], "label": "Unknown", "source": "wiki"}
{"story_id": 147, "example_id": 432, "conclusion": "Inside Out was a punk band.", "premises": ["Vic DiCara plays guitar and bass.", "The only style of music Vic DiCara plays is punk music.", "Vic DiCara played in the band Inside Out."], "premises-FOL": ["Play(vicdicara, guitar) ∧ Play(vicdicara, bass)", "¬(∃x (Music (vicdicara, punk) ∧ Music (vicdicara, x)))", "Band(vicdicara, insideOut)"], "label": "Unknown", "source": "wiki"}
{"story_id": 236, "example_id": 673, "conclusion": "Cancer researchers tend to use the cancer effect size to determine the relative importance of the genetic alterations that confer selective advantage to cancer cells.", "premises": ["Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. ", "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.", "P values are thresholds for belief, not metrics of effect. "], "premises-FOL": ["FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)", " PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)", " ∀x (PValue(x) → ThresholdsForBelief(x) ∧ ¬MetricsOfEffect(x))"], "label": "Unknown", "source": "wiki"}
{"story_id": 56, "example_id": 167, "conclusion": "Elizabeth is in a monarchy.", "premises": ["If a person is the leader of a country for life, that person is in a monarchy. ", "Leaders are either a king or a queen.", "Queens are female.", "Kings are male. ", "Elizabeth is a queen.", "Elizabeth is a leader"], "premises-FOL": ["∀x (Leader(x) → InMonarchy(x))", "∀x (Leader(x) → King(x) ⊕ Queen(x))", "∀x (Queen(x) → Female(x))", "∀x (King(x) → Male(x))", "Queen(elizabeth)", "Leader(elizabeth)"], "label": "True", "source": "wiki"}
{"story_id": 73, "example_id": 223, "conclusion": "There is a species of Ambiortus that doesn't live in the Mongol region.", "premises": ["Ambiortus is a prehistoric bird genus.", "Ambiorus Dementjevi is the only known species of Ambiortus.", "The Mongol region was where Ambiorus Dementjevi lived.", "Yevgeny Kurochkin was the discoverer of Ambiortus."], "premises-FOL": ["Prehistoric(ambiortus) ∧ BirdGenus(ambiortus)", "∀x (Species(x, ambiortus) → AmbiortusDementjevi(x))", "∀x (AmbiortusDementjevi(x) → Lived(x, mongolregion))", "Discovered(yevgenykurochkin, ambiortus)"], "label": "False", "source": "wiki"}
{"story_id": 3, "example_id": 9, "conclusion": "Fort Carillon was located in Europe.", "premises": ["Fort Ticonderoga is the current name for Fort Carillon.", "Pierre de Rigaud de Vaudreuil built Fort Carillon.", "Fort Carillon was located in New France.", "New France is not in Europe."], "premises-FOL": ["CurrentName(fortticonderoga, fortcarillon)", "Built(pierrederigauddevaudreuil, fortcarillon)", "LocatedIn(fortcarillon, newfrance)", "¬LocatedIn(newfrance, europe)"], "label": "Unknown", "source": "wiki"}
{"story_id": 222, "example_id": 632, "conclusion": "Some people flying from New York City to Seattle will be uncomfortable.", "premises": ["New York City is on the East Coast. ", "Seattle is on the West Coast. ", "If a person from a city on the East coast is traveling to a city on the west coast, they will be on a long flight.", "Most passengers on flights to Seattle from New York City are not in first class.", "People on long flights are uncomfortable unless they're in first class"], "premises-FOL": ["On(newyorkcity, eastcoast)", "On(seattle, westcoast)", "∀x ∀y ∀z ((TravelingFrom(x, y) ∧ On(y, eastcoast) ∧ TravelingTo(x, z) ∧ On(z, westcoast)) → OnLongFlight(x))", "∃x (¬InFirstClass(x) ∧ TravelingFrom(x, newyorkcity) ∧ TravelingTo(x, seattle))", "∀x (OnLongFlight(x) ∧ ¬InFirstClass(x) → Uncomfortable(x))"], "label": "False", "source": "wiki"}
{"story_id": 47, "example_id": 136, "conclusion": "The Controlled Substances Act prevents harmful things.", "premises": ["A controlled substance is a drug.", "There exist both harmful and beneficial controlled substances.", "If a child is exposed to a controlled substance, he or she is in chemical endangerment.", "Chemical Endangerment is harmful. ", "The Controlled Substances Act was an act passed in 1971.", "Some Acts prevent harmful things."], "premises-FOL": ["∀x (ControlledSubstances(x) → Drugs(x))", "∃x ∃x (ControlledSubstances(x) ∧ ControlledSubstances(y) ∧ Beneficial(x) ∧ Harmful(y))", "∀x ∀y (ExposedToControlledSubstance(x, y) → ChemicalEndangerment(x))", "∀x (ChemicalEndangerment(x) → Harmful(x))", "PassedIn(controlledSubstancesAct, year1971) ∧ Act(controlledSubstancesAct)", "∃x (Act(x) ∧ PreventsHarm(x))"], "label": "Unknown", "source": "wiki"}
{"story_id": 200, "example_id": 573, "conclusion": "If someone is cooking downstairs, it will always cause the first floor to become smokey.", "premises": ["There are two kitchens in the house: the upstairs kitchen and the downstairs kitchen.", "When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running.", "If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor."], "premises-FOL": ["∀x (Kitchen(x) → Up(x) ⊕ Down(x))", "(Cook(downstairs) ∧ ¬Run(ac)) → Smokey(firstFloor)", "(Cook(downstairs) ∧ Run(ac)) → Smokey(secondFloor)"], "label": "Unknown", "source": "wiki"}
{"story_id": 146, "example_id": 431, "conclusion": "Callus 4 is written in an unusual iambic trimeter to convey a strong analogy of human aging.", "premises": ["Callus 4 is a poem that was written by the ancient Roman writer Catullus.", "Callus 4 is a story about the retirement of a well-traveled ship.", "There is a strong analogy of human aging in the poem Callus 4.", "Callus 4 is written in an unusual iambic trimeter to convey a sense of speed over the waves."], "premises-FOL": ["Poem(callus4) ∧ WrittenBy(callus4, catullus) ∧ Roman(catullus)", "RetirementShip(callus4)", "Poem(callus4) → AgingAnalogy(callus4)", "Poem(callus4) → Lambic(callus4) ∧ Waves(callus4)"], "label": "False", "source": "wiki"}
{"story_id": 235, "example_id": 671, "conclusion": "Michael Crichton has directed a film about robots.", "premises": ["Westworld is an American science fiction-thriller TV series.", "In 2016, a new television series named Westworld debuted on HBO.", "The TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.", "The 1973 film Westworld is about robots that malfunction and begin killing the human visitors."], "premises-FOL": ["TVSeries(westworld) ∧ American(westworld) ∧ ScienceFictionThriller(westworld)", "Debut(westworld, year2016)", "∃x (Adapt(westworld, x) ∧ Produce(x, year1973) ∧ Write(michael, x) ∧ Direct(michael, x))", "About(westworld, robots)"], "label": "Unknown", "source": "wiki"}
{"story_id": 231, "example_id": 660, "conclusion": "The United States won fewer gold medals than China.", "premises": ["The 2008 Summer Olympics were held in Beijing, China.", "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.", "China won the most gold medals (48) in the 2008 Summer Olympics.", "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.", "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.", "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.", "87 countries won at least one medal during the 2008 Games."], "premises-FOL": ["HeldIn(summer2008olympics, beijingchina)", "SecondToBe(summer2008olympics, heldincommuniststate)", "Won(china, mostgoldmedals)", "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)", "Placed(russia, thirdingoldmedals)", "∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))", "∃x (Country(x) ∧ Won(x, medal))"], "label": "Unknown", "source": "wiki"}
{"story_id": 29, "example_id": 84, "conclusion": "Gasteren is a Dutch village.", "premises": ["Gasteren is village located in the province of Drenthe.", "Drenthe is a Dutch province. ", "No cities are villages.", "The population of a village in Drenthe was 155 people."], "premises-FOL": ["Village(gasteren) ∧ Province(drenthe) ∧ LocatedIn(gasteren, drenthe)", "Province(drenthe) ∧ Dutch(drenthe)", "∀x (City(x) → ¬Village(x))", "∃x (Population155(x) ∧ Village(x) ∧ LocatedIn(x, drenthe))"], "label": "Unknown", "source": "wiki"}
{"story_id": 210, "example_id": 605, "conclusion": "Platypuses are vertebrates.", "premises": ["The only types of mammals that lay eggs are platypuses and echidnas.", "Platypuses are not hyrax.", "Echidnas are not hyrax.", "No mammals are invertebrates.", "All animals are either vertebrates or invertebrates.", "Mammals are animals.", "Hyraxes are mammals.", "Grebes lay eggs.", "Grebes are not platypuses and also not echidnas."], "premises-FOL": ["∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypuses(x) ⊕ Echidnas(x)))", "∀x (Platypuses(x) → ¬Hyrax(x))", "∀x (Echidnas(x) → ¬Hyrax(x))", "∀x (Mammal(x) → ¬Invertebrate(x))", "∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))", "∀x (Mammal(x) → Animal(x))", "∀x (Hyrax(x) → Mammal(x))", "∀x (Grebes(x) → LayEgg(x))", "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"], "label": "Unknown", "source": "wiki"}
{"story_id": 89, "example_id": 273, "conclusion": "Bobby Flynn was born in Queens.", "premises": ["Bobby Flynn is a singer-songwriter. ", "Bobby Flynn finished 7th while competing on Australian Idol.", "Australian Idol competitors are Australian citizens.", "The Omega Three band made a nationwide tour in 2007.", "Bobby Flynn is a member of The Omega Three band.", "Bobby Flynn was born in Queensland."], "premises-FOL": ["Singer(bobbyFlynn) ∧ SongWriter(bobbyFlynn)", "Finished7th(bobbyFlynn) ∧ CompetedOnAustralianIdol(bobbyFlynn)", "∀x (CompetedOnAustralianIdol(x) → AustralianCitizen(x))", "MadeNationWideTour2007(theOmegaThreeBand) ", "IsMember(bobbyFlynn, theOmegaThreeBand)", "BornIn(bobbyFlynn, queensland)"], "label": "Unknown", "source": "wiki"}
{"story_id": 98, "example_id": 298, "conclusion": "Maggie Friedman developed Witches of East End.", "premises": ["One American screenwriter and producer is Maggie Friedman.", "Maggie Friedman was the showrunner and executive producer of the lifetime television series Witches of East End.", "Witches of East End is a fantasy-drama series.", "Maggie Friedman produced and developed Eastwick.", "Eastwick is a series by ABC."], "premises-FOL": ["American(maggiefriedman) ∧ Screenwriter(maggiefriedman) ∧ Producer(maggiefriedman)", "ShowRunnerOf(maggiefriedman, witchesofeastend) ∧ ExecutiveProducerOf(maggiefriedman, witchesofeastend) ∧ LifetimeTelevisionSeries(maggiefriedman)", "Fantasy-Drama(witchesofeastend) ∧ Series(witchesofeastend)", "Produced(maggiefriedman, eastwick) ∧ Developed(maggiefriedman, eastwick)", "Series(eastwick) ∧ By(eastwick, abc)"], "label": "Unknown", "source": "wiki"}
{"story_id": 249, "example_id": 698, "conclusion": "Luke is a chef.", "premises": ["Every chef can cook.", "Some people who aren’t chefs can cook.", "People who cook can make scrambled eggs and pasta.", "If someone can make cookies and muffins, they are a baker.", "Bakers who can also make scrambled eggs can make a good breakfast.", "Luke can make cookies, scrambled eggs, and muffins, but not pasta."], "premises-FOL": ["∀x (Chef(x) → Cook(x))", "∃x (¬Chef(x) ∧ Cook(x))", "∀x (Cook(x) → (MakeScrambledEggs(x) ∧ MakePasta(x)))", "∀x (MakeCookies(x) ∧ MakeMuffins(x) → Baker(x))", "∀x ((Baker(x) ∧ MakeScrambledEggs(x)) → MakeGoodBreakfast(x))", "MakeCookies(luke) ∧ MakeScrambledEggs(luke) ∧ MakeMuffins(luke) ∧ ¬MakePasta(luke)"], "label": "False", "source": "wiki"}
{"story_id": 196, "example_id": 563, "conclusion": "ETS administers international tests including the TOEFL, GRE and subject tests in China.", "premises": ["ETS develops various standardized tests primarily in the United States for K-12 and higher education. ", "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.", "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ", "ETS also develops K-12 statewide assessments used for accountability testing in many states."], "premises-FOL": ["∃x (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation))", "∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))", "∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytouseducationinstitutions))", "∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting))"], "label": "Unknown", "source": "wiki"}
{"story_id": 134, "example_id": 396, "conclusion": "Sally's company utilizes the installment sales method.", "premises": ["The installment sales method is the approach to recognize revenue under the US GAAP.", "In accrual accounting, revenues are recognized when they are realized.", "In cash accounting, revenues are recognized when cash is received.", "The US GAAP is the accounting standard developed and used by the US Securities and Exchange Commission.", "Sally works for the US Securities and Exchange Commission."], "premises-FOL": ["∀x (UsesGAAP(x) → UsesInstallmentMethod(x))", "∀x (UsesAccruralAccounting(x) → RecognizedWhen(revenues, realized))", "∀x (UsesCashAccounting(x) → RecognizedWhen(revenues, cashrecieved))", "DevelopedBy(usgaap, ussecuritiesandexchangecommission) ∧ UsesGAAP(ussecuritiesandexchangecommission)", "WorksFor(sally, ussecuritiesandexchangecommission)"], "label": "True", "source": "wiki"}
{"story_id": 12, "example_id": 34, "conclusion": "Water from the Croton River flows to the Bronx.", "premises": ["The Croton River watershed is the drainage basin of the Croton River.", "The Croton River is in southwestern New York.", "Water from the Croton River watershed flows to the Bronx.", "The Bronx is in New York."], "premises-FOL": ["DrainageBasinOf(crotonriverwatershed, crotonriver)", "In(crotonriver, southwesternnewyork)", "∃x (Water(x) ∧ From(x, crotonriverwatershed) ∧ FlowsTo(x, bronx))", "In(bronx, newyork)"], "label": "Unknown", "source": "wiki"}
{"story_id": 238, "example_id": 682, "conclusion": "Daniel studied bioengineering as his major at Rice University.", "premises": ["Daniel is a software engineer and he works at Palantir Technologies.", "Daniel studied bioengineering during his undergraduate at Rice University.", "Daniel’s older sister works at Meta as a technical sourcer. ", "Daniel’s dad and older sister both graduated from Stanford University.", "Daniel’s dad is a doctor practicing internal medicine at a veteran’s hospital in Minneapolis"], "premises-FOL": ["SoftwareEngineer(daniel) ∧ WorksAt(daniel, palantirTechnologies)", " StudiedBioengineering(daniel, riceUniversity)", " WorksAtMeta(danielsOlderSister) ∧ TechnicalSourcer(danielsOlderSister)", " GraduatedFromStanfordUniversity(danielsOlderSister) ∧ GraduatedFromStanfordUniversity(danielsDad)", " DoctorPracticingInternalMedicine(danielsDad, veteransHospitalInMinneapolis)"], "label": "True", "source": "wiki"}
{"story_id": 108, "example_id": 330, "conclusion": "There is a commercial plane made by both Airbus and Boeing.", "premises": ["All commerical aircraft are produced by either Boeing or Airbus.", "All American Airlines jets are commerical aircraft. ", "Airbus made more in revenue than Boeing last year."], "premises-FOL": ["∀x (CommercialAircraft(x) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus))", "∀x (AmericanAirlinesAircraft(x) → CommercialAircraft(x))", "MoreinRevenue(airbus, boeing)"], "label": "False", "source": "wiki"}
{"story_id": 229, "example_id": 654, "conclusion": "Barbara Ann Marshall did not receive medals.", "premises": ["Barbara Ann Marshall is a former swimmer and former world record-holder.", "Barbara Ann Marshall participated in the 1972 Summer Olympics.", "Barbara Ann Marshall's home country is the United States.", "All people who compete in the 1972 Summer Olympics represent their home country.", "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.", "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.", "Only relay swimmers who participated in the event final received medals."], "premises-FOL": ["FormerSwimmer(barbaraannmarshall) ∧ FormerWorldRecordHolder(barbaraannmarshall)", "ParticipatedIn(barbaraannmarshall, summer1972olympics)", "HomeCountry(barbaraannmarshall, unitedstates)", "∀x ∃y (ParticipatedIn(x, summer1972olympics) ∧ HomeCountry(x, y) → Represented(x, y))", "ParticipatedIn(barbaraannmarshall, preliminaryheatfreestylerelay)", "¬ParticipatedIn(barbaraannmarshall, finalheatfreestylerelay)", "∀x ((RelaySwimmer(x) ∧ ¬ParticipatedIn(x, finalheatfreerelay)) ↔ ¬Recieved(x, medal)))"], "label": "Unknown", "source": "wiki"}
{"story_id": 201, "example_id": 578, "conclusion": "It is possible to complete the game without ever reaching the green stage.", "premises": ["A game is played with three stages: red stage, yellow stage, and green stage.", "Each player begins at the red stage.", "All players must reach the yellow stage before they can reach the green stage.", "The yellow stage comes after the red stage.", "All players must proceed one stage at a time."], "premises-FOL": ["∃x (Player(x))", "∀x (Player(x) → StartRed(x))", "∀x (Player(x) → YellowToGreen(x))", "∀x (Player(x) → RedToYellow(x))", "∀x (Player(x) → ¬RedToGreen(x))"], "label": "Unknown", "source": "wiki"}
{"story_id": 181, "example_id": 526, "conclusion": "Captain America speaks Spanish.", "premises": ["An American superhero comes from either DC universe or Marvel universe.", "Captain America is a superhero.", "Captain America is an American.", "Captain America does not come from DC universe.", "If a superhero is American, he speaks English.", "A superhero speaks English or Spanish."], "premises-FOL": ["∀x (Superhero(x) ∧ American(x) → (ComeFrom(x, dc universe) ⊕ ComeFrom(x, marvel universe))) ", " Superhero(captain america) ", " American(captain america) ", " ¬ComeFrom(captain america, dc universe) ", " ∀x (Superhero(x) ∧ American(x) → Speak(x, english)) ", " ∀x (Superhero(x) → (Speak(x, english) ∨ Speak(x, spanish)))"], "label": "Unknown", "source": "wiki"}
{"story_id": 149, "example_id": 437, "conclusion": "Judd Bankert competed in the 1992 Winter Olympics.", "premises": ["Guam has participated in the Winter Olympics.", "In 1988, the Winter Olympics were held in Calgary.", "Guam sent an athlete to the Calgary Winter Olympics.", "If Guan sent an athlete to the Calgary Winter Olympics, then it participated in the Calgary Winter Olympics.", "Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics."], "premises-FOL": ["ParticipatedIn(guam, winterolympics)", "Year(y1988) → BeHeld(winterolympics, calgary)", "BeHeld(winterolympics, calgary) → SendAthletes(guam)", "SendAthletes(guam) → ParticipatedIn(guam, winterolympics)", "BeFrom(bankert, guam) ∧ ParticipatedIn(bankert, winterolympics)"], "label": "True", "source": "wiki"}
{"story_id": 54, "example_id": 162, "conclusion": "Roundels can be deployed on roundels.", "premises": ["A roundel is a rounded artillery fortification.", "A roundel is not higher than adjacent walls. ", "Cannons can be deployed on artillery fortifications. ", "Roundels are the oldest artillery fortifications.", "Battery towers are an artillery fortification."], "premises-FOL": ["∀x (Roundel(x) → Rounded(x) ∧ ArtilleryFortification(x))", "∀x ∀y (Roundel(x) ∧ AdjacentWall(y) → ¬Higher(x, y))", "∀x (ArtilleryFortification(x) → DeployCannons(x))", "∀x ∀y (Roundel(x) ∧ ArtilleryFortification(x) ∧ ArtilleryFortification(y) → Older(x, y))", "∀x (BatteryTower(x) → ArtilleryFortification(x))"], "label": "True", "source": "wiki"}
{"story_id": 158, "example_id": 456, "conclusion": "They have at leat one candidate city in Florida to visit.", "premises": ["Mr. and Mrs. Smith make a travel plan, they want to go to a city in California or Florida, and where neither of them has ever been.", "Cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.", "Cities in Florida that they are interested in are Orlando and Miami.", "Mr. Smith has been to two cities in California.", "Mrs. Smith has been to one city in Florida."], "premises-FOL": ["∀x (WantToGo(x) → (California(x) ∨ Florida(x)) ∧ (NeverGo(x)))", "∀x (((SanFrancisco(x) ∨ LosAngeles(x) ∨ SanDiego(x)) ∧ California(x)) → WantToGo(x))", "∀x ((Orlando(x) ∨ Miami(x)) ∧ Florida(x)) → WantToGo(x))", "CaliforniaCityVisited(mr.smith, two)", "FloridaCityVisited(mrs.smith, one)"], "label": "Unknown", "source": "wiki"}
{"story_id": 158, "example_id": 457, "conclusion": "They have at least two candidate cities in California to visit.", "premises": ["Mr. and Mrs. Smith make a travel plan, they want to go to a city in California or Florida, and where neither of them has ever been.", "Cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.", "Cities in Florida that they are interested in are Orlando and Miami.", "Mr. Smith has been to two cities in California.", "Mrs. Smith has been to one city in Florida."], "premises-FOL": ["∀x (WantToGo(x) → (California(x) ∨ Florida(x)) ∧ (NeverGo(x)))", "∀x (((SanFrancisco(x) ∨ LosAngeles(x) ∨ SanDiego(x)) ∧ California(x)) → WantToGo(x))", "∀x ((Orlando(x) ∨ Miami(x)) ∧ Florida(x)) → WantToGo(x))", "CaliforniaCityVisited(mr.smith, two)", "FloridaCityVisited(mrs.smith, one)"], "label": "Unknown", "source": "wiki"}
{"story_id": 88, "example_id": 268, "conclusion": "Bernarda Bryson Shahn was born in Greece.", "premises": ["Bernarda Bryson Shahn was a painter and lithographer.", "Bernarda Bryson Shahn was born in Athens, Ohio. ", "Bernarda Bryson Shahn was married to Ben Shahn.", "People born in Athens, Ohio are Americans."], "premises-FOL": ["Painter(bernardaBrysonShahn) ∧ Lithographer(bernardaBrysonShahn) ", "BornIn(bernardaBrysonShahn, athensOhio)", "MarriedTo(bernardaBrysonShahn, benShahn)", "∀x (BornIn(x, athensOhio) → American(x))"], "label": "Unknown", "source": "wiki"}
{"story_id": 161, "example_id": 464, "conclusion": "Zhang's English score is lower than 95.", "premises": ["There are five grades including A+, A, B+, B, and C in English.", "If a student gets A+ in English, then his score is greater than 95.", "If a student gets A in English, then his score is in the range of 90-95.", "Zhang got an A in English.", "Wang's English score is better than Zhang's.", "Wu's English score is lower than 90."], "premises-FOL": ["Grade(a+) ∨ Grade(a) ∨ Grade(b+) ∨ Grade(b) ∨ Grade(c)", "∀x (GetGrade(x, a+) → GreaterThan95(x))", "∀x (GetGrade(x, a) → Range90to95(x))", "GetGrade(zhang, a)", "Better(wang, zhang)", "LowerThan90(wu)"], "label": "True", "source": "wiki"}
{"story_id": 18, "example_id": 52, "conclusion": "Miroslav Fiedler was a French mathematician.", "premises": ["Miroslav Fiedler was a Czech mathematician.", "Miroslav Fiedler is known for his contributions to linear algebra and graph theory.", "Miroslav Fiedler is honored by the Fiedler eigenvalue.", "Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian."], "premises-FOL": ["Czech(miroslavfiedler) ∧ Mathematician(miroslavfiedler)", "KnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)", "HonoredBy(miroslavfiedler, fiedlerEigenvalue)", "TheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)"], "label": "Unknown", "source": "wiki"}
{"story_id": 48, "example_id": 141, "conclusion": "The Salmon of Doubt has no innovative Ideas.", "premises": ["Douglas Adams is an author who created the book collection called The Salmon of Doubt. ", "The Salmon of Doubt is about life experiences and technology.", "All authors are writers.", "Writers create innovative ideas.", "Some books that contain innovative ideas are about technology."], "premises-FOL": ["Author(douglasAdams) ∧ Book(theSalmonOfDoubt)", "AboutLifeExperience(theSalmonOfDoubt) ∧ AboutTechnology(theSalmonOfDoubt)", "∀x (Author(x) → Writer(x))", "∀x (Writer(x) → CreateInnovativeIdea(x))", "∃x (ContainInnovativeIdea(x) ∧ AboutTechnology(x))"], "label": "Unknown", "source": "wiki"}
{"story_id": 32, "example_id": 95, "conclusion": "Hugh Vanstone attended school in the US.", "premises": ["Hugh Vanstone is one of the world's leading lighting designers. ", "Hugh Vanstone is from the UK.", "Hugh Vanstone has lit more than 160 productions.", "Hugh Vanstone attended school where he is from. "], "premises-FOL": ["WorldLeadingLightningDesigner(hughVanstone)", "FromUK(hughVanstone)", "LitOver160Productions(hughVanstone)", "AttendedSchoolWhereFrom(hughVanstone)"], "label": "Unknown", "source": "wiki"}
{"story_id": 106, "example_id": 322, "conclusion": "Ralph Hammerthaler is a writer born in Asia.", "premises": ["Ralph Hammerthaler was born in Wasserburg am Inn.", "Wasserburg am Inn is in Germany.", "Germany is in Europe.", "Ralph Hammerthaler is a German writer.", "Ralph Hammerthaler was born in 1965. "], "premises-FOL": ["BornIn(ralphHammerthaler, wasserburgAmInn)", "LocatedIn(wasserbAmInn, germany)", "LocatedIn(germany, europe)", "Writer(ralphHammerthaler)", "BornIn1965(ralphHammerthaler)"], "label": "Unknown", "source": "wiki"}
{"story_id": 21, "example_id": 62, "conclusion": "The Golden State Warriors will have more income for gate receipts.", "premises": ["The Golden State Warriors are a team from San Francisco.", "The Golden State Warriors won the NBA finals.", "All teams attending the NBA finals have more than thirty years of history.", "Boston Celtics are a team that lost the NBA finals.", "If a team wins the NBA finals, then they will have more income.", "If a team wins or loses at the NBA finals, then they are attending the finals."], "premises-FOL": ["Team(goldenstatewarriors) ∧ From(goldenstatewarriors, sanfrancisco)", "Won(goldenstatewarriors, nbafinals)", "∀x (team(x) ∧ Attending(x, nbafinals) → HasMoreThan(x, thirtyyearsofhistory))", "Team(bostonceltics) ∧ Lost(bostonceltics, nbafinals)", "∀x (Team(x) ∧ Won(x, nbafinals) → MoreIncome(x))", "∀x (Won(x, nbafinals) ∨ Lost(x, nbafinals) → Attending(x, nbafinals))"], "label": "True", "source": "wiki"}
{"story_id": 218, "example_id": 624, "conclusion": "Maya will not play violin.", "premises": ["Maya will play violin if and only if she never injures her fingers.", "Volleyball players can injure their ankle, fingers, or shoulder.", "Maya is a volleyball player."], "premises-FOL": ["CanInjureFingures(maya) → ¬WillPlayViolin(maya)", "∀x (VolleyballPlayer(x) → CanInjureFingures(x))", "VolleyballPlayer(maya)"], "label": "True", "source": "wiki"}
{"story_id": 266, "example_id": 715, "conclusion": "Some CD players are suitable toys for children.", "premises": ["All CD players are delicate mechanisms.", "No delicate mechanisms are suitable toys for children."], "premises-FOL": ["∀x (CDPlayer(x) → DelicateMechanism(x))", "∀x (DelicateMechanism(x) → ¬SuitableToyForChildren(x))"], "label": "Unknown", "source": "wiki"}
{"story_id": 39, "example_id": 116, "conclusion": "White Town was a successful band.", "premises": ["\"Your Woman\" is a song by British one-man band White Town.", "\"Your Woman\" song peaked at No. 1 on the UK Singles Chart.", "If a song peaked at No.1 at a cetain place, then it was extremely popular.", "\"Your Woman\" also peaked No. 1 in Iceland, Israel and Spain."], "premises-FOL": ["Produce(whiteTown, yourWoman)", "Peak(yourWoman, uKSinglesChart)", "∀x ∀y (Peak(x, y) → Popular(x))", "Peak(yourWoman, iceland) ∧ Peak(yourWoman, isarel) ∧ Peak(yourWoman, spain)"], "label": "Unknown", "source": "wiki"}
{"story_id": 13, "example_id": 36, "conclusion": "System 7 has released several singles.", "premises": ["System 7 is a UK-based electronic dance music band.", "Steve Hillage and Miquette Giraudy formed System 7.", "Steve Hillage and Miquette Giraudy are former members of the band Gong.", "Electric dance music bands are bands.", "System 7 has released several club singles.", "Club singles are not singles."], "premises-FOL": ["BasedOn(system7, uk) ∧ ElectronicDanceMusicBand(system7)", "Formed(stevehillage, system7) ∧ Formed(miquettegiraudy, system7)", "FormerMemberOf(stevehillage, gong) ∧ FormerMemberOf(miquettegiraudy, gong)", "∀x (ElectronicDanceMusicBand(x) → Band(x))", "∃x (ClubSingle(x) ∧ Released(system7, x))", "∀x (ClubSingle(x) → ¬Single(x))"], "label": "Unknown", "source": "wiki"}
{"story_id": 220, "example_id": 629, "conclusion": "The single \"1901\" is a certified gold single.", "premises": ["The indie pop band Phoenix has released 6 albums. ", "Phoenix's album \"Wolfgang Amadeus Phoenix\" sold over 500,000 copies. ", "A certified gold album or single is one which sold over half a million copies. ", "\"1901\" is a single from Phoenix's album \"Wolfgang Amadeus Phoenix.\"", "Over 400,000 copies of \"1901\" have been sold. "], "premises-FOL": ["AlbumsReleased(phoenix, l6)", "Album(wolfgangamadeusphoenix) ∧ IsAlbumOf(wolfgangamadeusphoenix, phoenix) ∧ SoldOver(wolfgangamadeusphoenix, l500000)", "∀x ((Album(x) ∨ Single(x)) ∧ SoldOver(x, l500000) → CertifiedGold(x))", "Single(l1901) ∧ From(l1901, wolfgangamadeusphoenix) ∧ By(l1901, phoenix)", "SoldOver(l1901, l400000)"], "label": "Unknown", "source": "wiki"}
{"story_id": 85, "example_id": 261, "conclusion": "Diethylcarbamazine is used in the treatment of filariasis.", "premises": ["Diethylcarbamazine is a medication discovered in the year 1947.", "Diethylcarbamazine can be used to treat river blindness.", "The only preferred treatment for river blindness is ivermectin.", "Diethylcarbamazine is not ivermectin."], "premises-FOL": ["∀x (Diethylcarbamazine(x) ∧ Medication(x) ∧ DiscoveredIn(x, year1947))", "∀x ∀y (Diethylcarbamazine(x) ∧ RiverBlindness(y) → Treats(x, y))", "∀x ∀y (RiverBlindness(y) ∧ PreferredTreatment(x, y) → Ivermectin(x))", "∀x (Diethylcarbamazine(x) → ¬Ivermectin(x))"], "label": "Unknown", "source": "wiki"}
{"story_id": 114, "example_id": 345, "conclusion": "No cutmen appear in boxing matches.", "premises": ["A cutman is responsible for preventing and treating physical damage to a fighter.", "Cutmen appear in matches such as a boxing, kickboxing or a mixed martial arts bout. ", "Cutmen typically handle swelling, nosebleeds and lacerations. ", "Jack is a cutman."], "premises-FOL": ["∀x (Cutman(x) → Prevent(x, physicalDamage) ∧ Treat(x, physicalDamage))", "∀x (Cutman(x) → Appear(x, boxing) ∨ Appear(x, kickboxing) ∨ Appear(x, mixedMartialBout))", "∀x (Cutman(x) → Handle(x, swelling) ∧ Handle(x, nosebleeds) ∧ Handle(x, lacerations))", "Cutman(jack)"], "label": "Unknown", "source": "wiki"}
{"story_id": 301, "example_id": 750, "conclusion": "V is invigorating", "premises": ["When something is depressing, it is sad.", "V is depressing. "], "premises-FOL": ["∀x (Depressing(x) → Sad(x))", "∀x (V(x) → Depressing(x))"], "label": "Unknown", "source": "wiki"}
{"story_id": 103, "example_id": 314, "conclusion": "John Evans Popularized the term paalstab.", "premises": ["Palstaves are a type of early bronze axe.", "Commonly found in northern, western and south-western Europe, palstaves are cast in moulds.", "John Evans is an archeologist who popularized the term \"palstave\".", "A paalstab is not an axe, but rather a digging shovel."], "premises-FOL": ["∀x (Palstave(x) → From(x, earlybronzeage) ∧ Axe(x))", "∀x ∀y (Palstave(x) ∧ Mould(y) → FoundIn(x, northerneurope) ∧ FoundIn(x, westerneurope) ∧ FoundIn(x, south-westerneurope) ∧ CastIn(x, y))", "Archeologist(johnevans) ∧ Popularized(johnevans, termpalstave)", "∀x (Paalstab(x) → ¬Axe(x) ∧ DiggingShovel(x))"], "label": "Unknown", "source": "wiki"}
{"story_id": 103, "example_id": 315, "conclusion": "There is an axe that is commonly found in Western Europe.", "premises": ["Palstaves are a type of early bronze axe.", "Commonly found in northern, western and south-western Europe, palstaves are cast in moulds.", "John Evans is an archeologist who popularized the term \"palstave\".", "A paalstab is not an axe, but rather a digging shovel."], "premises-FOL": ["∀x (Palstave(x) → From(x, earlybronzeage) ∧ Axe(x))", "∀x ∀y (Palstave(x) ∧ Mould(y) → FoundIn(x, northerneurope) ∧ FoundIn(x, westerneurope) ∧ FoundIn(x, south-westerneurope) ∧ CastIn(x, y))", "Archeologist(johnevans) ∧ Popularized(johnevans, termpalstave)", "∀x (Paalstab(x) → ¬Axe(x) ∧ DiggingShovel(x))"], "label": "Unknown", "source": "wiki"}
{"story_id": 90, "example_id": 276, "conclusion": "Koei Tecmo holds anime.", "premises": ["Koei Tecmo is a Japanese video game and anime holding company.", "Holding companies hold several companies.", "Tecmo was disbanded in Japan, while Koei survived, but was renamed.", "Video game holding companies are holding companies."], "premises-FOL": ["Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)", "∀x ∃y (HoldingCompany(x) → Company(y) ∧ Holds(x, y))", "Disbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei)", "∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))"], "label": "Unknown", "source": "wiki"}
{"story_id": 199, "example_id": 572, "conclusion": "The Playstation Camera can be used for all Playstation consoles.", "premises": ["The PlayStation EyeToy is a camera accessory for the Playstation 2. ", "The PlayStation Eye is a camera accessory for the Playstation 3.", "The Playstation Camera is a camera accessory for the Playstation 4 and the Playstation 5.", "Camera accessory for the system is compatible with that system", "Only the Playstation Camera is compatible with more than one system."], "premises-FOL": ["Accessory(pseyetoy, ps2)", "Accessory(pseye, ps3)", "Accessory(pscamera, ps4) ∧ Accessory(pscamera, ps5)", "∀x ∀y (Accessory(x, y) → Compatible(x, y))", "¬Compatible(pseye, ps2) ∧ ¬Compatible(pseye, ps4)∧¬Compatible(pseye, ps5)∧¬Compatible(pseyetoy, ps3)∧¬Compatible(pseyetoy, ps4)∧¬Compatible(pseyetoy, ps5)"], "label": "Unknown", "source": "wiki"}
{"story_id": 99, "example_id": 299, "conclusion": "Baku is southeast of Shafaq-Asiman.", "premises": ["Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.", "Baku is northwest of Shafaq-Asiman.", "If place A is northwest of place B, then place B is southeast of place A."], "premises-FOL": ["LargeComplex(shafaq-asiman) ∧ LargeComplex(shafaq-asiman) ∧ Offshore(shafaq-asiman) ∧ GeologicalStructures(shafaq-asiman) ∧ In(shafaq-asiman, caspiansea)", "NorthwestOf(baku, shafaq-asiman)", "∀x ∀y (NorthwestOf(x, y) → SoutheastOf(y, x))"], "label": "Unknown", "source": "wiki"}
{"story_id": 71, "example_id": 215, "conclusion": "Herodicus was tutored by Hippocrates.", "premises": ["Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.", "Herodicus was born in the city of Selymbria.", "Selymbria is a colony of the city-state Megara.", "One of the tutors of Hippocrates was Herodicus.", "Massages were recommended by Herodicus.", "Some of theories of Herodicus are considered to be the foundation of sports medicine."], "premises-FOL": ["Greek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus)", "Born(herodicus, selymbia) ∧ City(selymbia)", "Colony(selymbia, megara) ∧ CityState(megara)", "Tutored(herodicus, hippocrates)", "Recommended(herodicus, massages)", "∃x (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine))"], "label": "Unknown", "source": "wiki"}
{"story_id": 71, "example_id": 216, "conclusion": "Herodicus was born in a city-state.", "premises": ["Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.", "Herodicus was born in the city of Selymbria.", "Selymbria is a colony of the city-state Megara.", "One of the tutors of Hippocrates was Herodicus.", "Massages were recommended by Herodicus.", "Some of theories of Herodicus are considered to be the foundation of sports medicine."], "premises-FOL": ["Greek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus)", "Born(herodicus, selymbia) ∧ City(selymbia)", "Colony(selymbia, megara) ∧ CityState(megara)", "Tutored(herodicus, hippocrates)", "Recommended(herodicus, massages)", "∃x (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine))"], "label": "Unknown", "source": "wiki"}
{"story_id": 74, "example_id": 228, "conclusion": "Camp Davern was established in 1989.", "premises": ["Camp Davern is a traditional summer camp for boys and girls.", "Camp Davern was established in the year 1946.", "Camp Davern was operated by the YMCA until the year 2015.", "Camp Davern is one of Ontario's oldest summer camps."], "premises-FOL": ["TraditionalSummerCamp(campdavern) ∧ ForBoysAndGirls(campdavern)", "EstablishedIn(campdavern, year1946)", "OperatedByYMCAUntil(campdavern, year2015)", "OneOf(campdavern, ontariosoldestsummercamps)"], "label": "Unknown", "source": "wiki"}
{"story_id": 157, "example_id": 452, "conclusion": "Blueberries were the most popular fruit at the party.", "premises": ["The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry.", "All fruits are provided in the same weight at the beginning of the party.", "If the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit.", "At the end of the party, strawberries had the lowest remaining weight.", "At the end of the party, the amount of leftover blueberries was lower than that of cherries.", "Benjamin only ate oranges and grapes at the party."], "premises-FOL": ["Party(strawberry) ∨ Party(orange) ∨ Party(blueberry) ∨ Party(grape) ∨ Party(cherry) ", "∀x (Party(x) → SameWeight(x))", "∀x (LowestAmount(x) → MostPopular(x)) ", "LowestAmount(strawberries)", "Lower(blueberry, cherry)", "Eat(orange, benjamin) ∧ Eat(grape, benjamin) ∧ ¬Eat(blueberry, benjamin) ∧ ¬Eat(cherry, benjamin) ∧ ¬Eat(strawberry, benjamin)"], "label": "Unknown", "source": "wiki"}
{"story_id": 157, "example_id": 453, "conclusion": "Cherries were the most popular fruit at the party.", "premises": ["The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry.", "All fruits are provided in the same weight at the beginning of the party.", "If the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit.", "At the end of the party, strawberries had the lowest remaining weight.", "At the end of the party, the amount of leftover blueberries was lower than that of cherries.", "Benjamin only ate oranges and grapes at the party."], "premises-FOL": ["Party(strawberry) ∨ Party(orange) ∨ Party(blueberry) ∨ Party(grape) ∨ Party(cherry) ", "∀x (Party(x) → SameWeight(x))", "∀x (LowestAmount(x) → MostPopular(x)) ", "LowestAmount(strawberries)", "Lower(blueberry, cherry)", "Eat(orange, benjamin) ∧ Eat(grape, benjamin) ∧ ¬Eat(blueberry, benjamin) ∧ ¬Eat(cherry, benjamin) ∧ ¬Eat(strawberry, benjamin)"], "label": "Unknown", "source": "wiki"}
{"story_id": 122, "example_id": 367, "conclusion": "A shetani is either mythological or a creature.", "premises": ["Beasts of Prey is either a fantasy novel or a science fiction novel.", "Science fiction novels are not about mythological creatures", "Beasts of Prey Is about a creature known as the Shetani.", "Shetanis are mythological."], "premises-FOL": ["Novel(beastsofprey) ∧ Fantasy(beastsofprey) ∨ ScienceFiction(beastsofprey)", "∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))", "About(beastsofprey, shetani) ∧ Creature(shetani)", "Mythological(shetani)"], "label": "False", "source": "wiki"}
{"story_id": 17, "example_id": 49, "conclusion": "Amy Odell is an English toy inventor.", "premises": ["Odell is an English surname originating in Odell, Bedfordshire.", "In some families Odell is spelled O'Dell, in a mistaken Irish adaptation.", "Notable people with the surname include Amy Odell, Jack Odell, and Mats Odell.", "Amy Odell is a British singer-songwriter.", "Jack Odell is an English toy inventor."], "premises-FOL": ["∀x (Odell(x) → Surname(x))", "∃x (Odell(x) ∧ SpelledODell(x))", "Odell(amyOdell) ∧ NotablePeople(amyOdell) ∧ Odell(jackOdell) ∧ NotablePeople(jackOdell) ∧ Odell(matsOdell) ∧ NotablePeople(matsOdell)", "British(amyOdell) ∧ Singer(amyOdell) ∧ SongWriter(amyOdell)", "English(jackOdell) ∧ ToyInvertor(jackOdell)"], "label": "Unknown", "source": "wiki"}
{"story_id": 167, "example_id": 482, "conclusion": "Mary gets from New Haven to New York City by train.", "premises": ["If you go somewhere by train, you will not lose time.", "If you go somewhere by car and meet traffic jam, you will lose time.", "If you lose time, you will be late for work.", "Mary can get from New Haven to New York City either by train or car.", "Mary is late for work."], "premises-FOL": ["∀x (Train(x) → ¬LoseTime(x))", "∀x ((Car(x) ∧ MeetJam(x)) → LoseTime(x))", "∀x (LoseTime(x) ↔ LateForWork(x))", "Train(mary) ⊕ Car(mary)", "LateForWork(mary)"], "label": "False", "source": "wiki"}
{"story_id": 167, "example_id": 483, "conclusion": "Mary gets from New Haven to New York City by car.", "premises": ["If you go somewhere by train, you will not lose time.", "If you go somewhere by car and meet traffic jam, you will lose time.", "If you lose time, you will be late for work.", "Mary can get from New Haven to New York City either by train or car.", "Mary is late for work."], "premises-FOL": ["∀x (Train(x) → ¬LoseTime(x))", "∀x ((Car(x) ∧ MeetJam(x)) → LoseTime(x))", "∀x (LoseTime(x) ↔ LateForWork(x))", "Train(mary) ⊕ Car(mary)", "LateForWork(mary)"], "label": "True", "source": "wiki"}
{"story_id": 208, "example_id": 599, "conclusion": "There is a great lake that did not form at the end of the Last Glacial Period.", "premises": ["The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.", "Some major settlements of Lake Erie are in NY, PA, OH, and MI.", "NY, PA, OH, MI are states in the US.", "ON is a state of Canada.", "There is a major settlement of Lake Huron in ON. ", "All states are in their country.", "The US is in North America.", "The Great Lakes began to form at the end of the Last Glacial Period."], "premises-FOL": ["∀x (GreatLake(x) → Superior(x) ∨ Michigan(x) ∨ Huron(x) ∨ Erie(x) ∨ Ontario(x))", "∃x ∀y (Erie(y) ∧ MajorSettlementOf(x, y) ∧ In(x, ny) ∨ In(x, pa) ∨ In(x, oh) ∨ In(x, mi))", "State(ny, us) ∧ State(pa, us) ∧ State(oh, us) ∧ State(mi, us)", "State(on, canada)", "∃x ∀y (Huron(y) ∧ MajorSettlementOf(x, y) ∧ In(x, on))", "∀x ∀y (State(x, y) → In(x, y))", "In(us, northamerica)", "∀x (GreatLake(x) → FormAtEndOf(x, lastglacialperiod))"], "label": "False", "source": "wiki"}
{"story_id": 105, "example_id": 321, "conclusion": "Hyunsik is Korean.", "premises": ["Show Your Love is a song recorded by the South Korean boy band BtoB 4u.", "The lead single of the extended play Inside is Show Your Love.", "Show Your Love contains a hopeful message.", "BtoB 4u member Hyunsik wrote Show Your Love.", "There is a music video for Show Your Love."], "premises-FOL": ["Song(showyourlove) ∧ RecordedBy(showyourlove, btob4u) ∧ SouthKorean(btob4u) ∧ BoyBand(btob4u)", "ExtendedPlay(inside) ∧ LeadSingle(showyourlove) ∧ LeadSingleOf(showyourlove, inside)", "Contains(showyourlove, hopefulmessage)", "Member(hyunsik, btob4u) ∧ Wrote(hyunsik, showyourlove)", "HasMusicVideo(showyourlove)"], "label": "Unknown", "source": "wiki"}
{"story_id": 16, "example_id": 46, "conclusion": "Dagfinn Dahl is a Norwegian physician.", "premises": ["Dagfinn is a given name.", "Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl. ", "Dagfinn Aarskog is a Norwegian physician.", "Dagfinn Dahl is a Norwegian barrister."], "premises-FOL": ["∀x (Dagfinn(x) → GivenName(x))", "Dagfinn(dagfinnAarskog) ∧ NotablePeople(dagfinnAarskog) ∧ Dagfinn(dagfinnBakke) ∧ NotablePeople(dagfinnBakke) ∧ Dagfinn(dagfinnDahl) ∧ NotablePeople(dagfinnDahl)", "Norwegian(dagfinnAarskog) ∧ Physician(dagfinnAarskog)", "Norwegian(dagfinnDahl) ∧ Barrister(dagfinnDahl)"], "label": "Unknown", "source": "wiki"}
{"story_id": 34, "example_id": 100, "conclusion": "Nadal is in the Big 3.", "premises": ["Rafa Nadal was born in Mallorca.", "Rafa Nadal is a professional tennis player.", "Nadal's win ratio is higher than 80%.", "All players in the Big 3 are professionals who have a high win ratio."], "premises-FOL": ["BornIn(rafaNadal, mallorca)", "ProfessionalTennisPlayer(rafaNadal)", "HighWinRatio(rafaNadal)", "∀x (ProfessionalTennisPlayer(x) ∧ HighWinRatio(x) → InBig3(x))"], "label": "True", "source": "wiki"}
{"story_id": 49, "example_id": 144, "conclusion": "Professional wide receivers are good at catching balls.", "premises": ["Quincy McDuffie is an American professional wide receiver in Canadian Football.", "People who can catch balls are good wide receivers. ", "Quincy McDuffie can catch many footballs easily.", "Good wide receivers play professionally.", "Good wide receivers can catch with both their left and right hand.", "All footballs are balls."], "premises-FOL": ["American(quincymcduffie) ∧ Professional(quincymcduffie) ∧ WideReciever(quincymcduffie) ∧ In(quincymcduffie, canadianfootball)", "∀x ∃y (CanCatch(x, y) ∧ Ball(y) → Good(x, widereciever))", "∃x (Football(x) ∧ CanCatch(quincymcduffie, x))", "∀x (Good(x, widereciever) → Professional(x))", "∀x (Good(x, widereciever) → CanCatchWith(x, lefthand) ∧ CanCatchWith(x, righthand))", "∀x (Football(x) → Ball(x))"], "label": "Unknown", "source": "wiki"}
{"story_id": 102, "example_id": 310, "conclusion": "Ted Smith was a sergeant.", "premises": ["Edwin Smith was a New Zealand Rower from Auckland.", "Edwin Smith was also known as Ted Smith.", "Edwin Smith went to Rose Road Primary School, located in Grey Lynn.", "Edwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.", "Broadway Sheetmetals was a buisness that was ran and owned by Edwin Smith, who was a sheetmetal worker."], "premises-FOL": ["From(edwinsmith, newzealand) ∧ Rower(edwinsmith) ∧ From(edwinsmith, auckland)", "KnownAs(edwinsmith, tedsmith)", "WentTo(edwinsmith, roseroadprimaryschool) ∧ LocatedIn(roseroadprimaryschool, greylynn)", "Sergeant(edwinsmith) ∧ ServedWith(edwinsmith, newzealand24thbattalion) ∧ ServedIn(edwinsmith, italy) ∧ ServedIn(edwinsmith, egypt)", "Buisness(broadwaysheetmetals) ∧ Ran(edwinsmith, broadwaysheetmetals) ∧ Owned(edwinsmith, broadwaysheetmetals) ∧ SheetmetalWorker(edwinsmith)"], "label": "Unknown", "source": "wiki"}
{"story_id": 139, "example_id": 409, "conclusion": "Jung fought Sadollah.", "premises": ["UFC Fight Night was a mixed martial arts event and was held in Sweden.", "At UFC Fight Night, Sadollah was scheduled to fight Musoke.", "Sadollah fought Akiyama at UFC Fight Night.", "Musoke fought Yakovlev at UFC Fight Night.", "Jung was injured at UFC Fight Night.", "Injured people did not fight at UFC Fight Night."], "premises-FOL": ["Event(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ Sweden(uFCFightNight)", "Event(uFCFightNight) → ScheduledToFight(sadollah, musoke)", "Event(uFCFightNight) → Fight(sadollah, akiyama)", "Event(uFCFightNight) → Fight(musoke, yakovlev)", "Event(uFCFightNight) → Injured(jung)", "∀x (Injured(x) → ¬FightInUFC(x))"], "label": "Unknown", "source": "wiki"}
{"story_id": 139, "example_id": 411, "conclusion": "Sadollah fought Musoke.", "premises": ["UFC Fight Night was a mixed martial arts event and was held in Sweden.", "At UFC Fight Night, Sadollah was scheduled to fight Musoke.", "Sadollah fought Akiyama at UFC Fight Night.", "Musoke fought Yakovlev at UFC Fight Night.", "Jung was injured at UFC Fight Night.", "Injured people did not fight at UFC Fight Night."], "premises-FOL": ["Event(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ Sweden(uFCFightNight)", "Event(uFCFightNight) → ScheduledToFight(sadollah, musoke)", "Event(uFCFightNight) → Fight(sadollah, akiyama)", "Event(uFCFightNight) → Fight(musoke, yakovlev)", "Event(uFCFightNight) → Injured(jung)", "∀x (Injured(x) → ¬FightInUFC(x))"], "label": "Unknown", "source": "wiki"}
{"story_id": 237, "example_id": 677, "conclusion": "Hadid became a UK citizen later in her life.", "premises": ["Zaha Hadid is a British-Iraqi architect, artist and designer.", "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.", "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.", "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. "], "premises-FOL": ["British-IraqiArchitect(zahaHadid)", "BornIn(zahaHadid, y1950)", "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)", "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"], "label": "True", "source": "wiki"}
{"story_id": 237, "example_id": 679, "conclusion": "Hadid was born in 1982.", "premises": ["Zaha Hadid is a British-Iraqi architect, artist and designer.", "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.", "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.", "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. "], "premises-FOL": ["British-IraqiArchitect(zahaHadid)", "BornIn(zahaHadid, y1950)", "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)", "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"], "label": "Unknown", "source": "wiki"}
{"story_id": 194, "example_id": 557, "conclusion": "Rosa is the daughter of someone who is responsible for the oversight of traffic.", "premises": ["Rosa was born in Santiago. ", "Santiago is the capital and largest city of Chile.", "Rosa is the daughter of a Catalan building contractor, Jose.", "Jose has a Chilean wife, Carmen.", "A building contractor is responsible for the day-to-day oversight of a construction site. "], "premises-FOL": ["Born(rosa, santiago)", "Capital(santiago, chile) ∧ LargestCity(santiago, chile)", "Daughter(rosa, jose) ∧ BuildingContractor(jose) ∧ ¬Chilean(jose)", "Wife(jose, carmen) ∧ Chilean(carmen)", "∀x ∃y (BuildingContractor(x) ∧ ConstructionSite(y) → Oversee(x, y))"], "label": "True", "source": "wiki"}
{"story_id": 136, "example_id": 402, "conclusion": "Phoenix makes pop rock music.", "premises": ["Phoneix's music is classified under the indie pop genre.", "Phoenix is a band from France.", "French bands write songs in French or in English.", "Aside from indie pop, pop rock and synth-pop are two other genres of music.", "Phoneix has no songs in French."], "premises-FOL": ["IndiePop(phoenix)", "Band(phoenix) ∧ France(phoenix)", "∀x ∀y (Band(x) ∧ France(x) ∧ Make(x, y) → FrenchSong(y) ⊕ EnglishSong(y))", "∀x (IndiePop(x) → ¬PopRock(x) ∧ ¬SynthPop(x))", "∀x (Make(phoenix, x) → ¬FrenchSong(x))"], "label": "False", "source": "wiki"}

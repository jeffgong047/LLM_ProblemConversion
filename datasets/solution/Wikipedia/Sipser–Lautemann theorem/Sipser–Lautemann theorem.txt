Bounded-error probabilistic polynomial time is contained in the polynomial time hierarchy
In computational complexity theory, the Sipser–Lautemann theorem or Sipser–Gács–Lautemann theorem states that bounded-error probabilistic polynomial (BPP) time is contained in the polynomial time hierarchy, and more specifically Σ2 ∩ Π2.
In 1983, Michael Sipser showed that BPP is contained in the polynomial time hierarchy.[1] Péter Gács showed that BPP is actually contained in Σ2 ∩ Π2. Clemens Lautemann contributed by giving a simple proof of BPP’s membership in Σ2 ∩ Π2, also in 1983.[2] It is conjectured that in fact BPP=P, which is a much stronger statement than the Sipser–Lautemann theorem.


Proof[edit]
Here we present the Lautemann's proof.[2] Without loss of generality, a machine M ∈ BPP with error ≤ 2−|x| can be chosen.  (All BPP problems can be amplified to reduce the error probability exponentially.)  The basic idea of the proof is to define a Σ2 sentence that is equivalent to stating that x is in the language, L, defined by M by using a set of transforms of the random variable inputs.
Since the output of M depends on random input, as well as the input x, it is useful to define which random strings produce the correct output as A(x) = {r | M(x,r) accepts}.  The key to the proof is to note that when x ∈ L, A(x) is very large and when x ∉ L, A(x) is very small.  By using bitwise parity, ⊕, a set of transforms can be defined as A(x) ⊕ t={r ⊕ t | r ∈ A(x)}.  The first main lemma of the proof shows that the union of a small finite number of these transforms will contain the entire space of random input strings.  Using this fact, a Σ2 sentence and a Π2 sentence can be generated that is true if and only if x ∈ L (see conclusion).

Lemma 1[edit]
The general idea of lemma one is to prove that if A(x) covers a large part of the random space R=1,0|r|={1,0}^|r| then there exists a small set of translations that will cover the entire random space.  In more mathematical language:

If |A(x)||R|≥1−12|x||A(x)|/|R|≥1-1/2^|x|, then ∃t1,t2,…,t|r|_1,t_2,…,t_|r|, where ti∈1,0|r|_i∈{1,0}^|r| such that ⋃iA(x)⊕ti=R.⋃_iA(x)_i=R.
Proof. Randomly pick t1, t2, ..., t|r|. Let S=⋃iA(x)⊕ti=⋃_iA(x)_i (the union of all transforms of A(x)).
So, for all r in R,

Pr[r∉S]=Pr[r∉A(x)⊕t1]⋅Pr[r∉A(x)⊕t2]⋯Pr[r∉A(x)⊕t|r|]≤12|x|⋅|r|.[r]=[r(x)_1]·[r(x)_2]⋯[r(x)_|r|]≤1/2^|x|·|r|.
The probability that there will exist at least one element in R not in S is

Pr[⋁i(ri∉S)]≤∑i12|x|⋅|r|=2|r|2|x|⋅|r|<1.[⋁_i(r_i)]≤∑_i1/2^|x|·|r|=2^|r|/2^|x|·|r|<1.
Therefore

Pr[S=R]≥1−2|r|2|x|⋅|r|>0.[S=R]≥1-2^|r|/2^|x|·|r|>0.
Thus there is a selection for each t1,t2,…,t|r|_1,t_2,…,t_|r| such that

⋃iA(x)⊕ti=R.⋃_iA(x)_i=R.
Lemma 2[edit]
The previous lemma shows that A(x) can cover every possible point in the space using a small set of translations.  Complementary to this, for x ∉ L only a small fraction of the space is covered by S=⋃iA(x)⊕ti=⋃_iA(x)_i. We have:

|S||R|≤|r|⋅|A(x)||R|≤|r|⋅2−|x|<1|S|/|R|≤|r|·|A(x)|/|R|≤|r|·2^-|x|<1
because |r||r| is polynomial in |x||x|.

Conclusion[edit]
The lemmas show that language membership of a language in BPP can be expressed as a Σ2 expression, as follows.

x∈L⟺∃t1,t2,…,t|r|∀r∈R⋁1≤i≤|r|(M(x,r⊕ti)accepts)._1,t_2,…,t_|r| ⋁_1≤|r|(M(x,r_i)accepts).
That is, x is in language L if and only if there exist |r||r| binary vectors, where for all random bit vectors r, TM M accepts at least one random vector ⊕ ti.
The above expression is in Σ2 in that it is first existentially then universally quantified.  Therefore BPP ⊆ Σ2.  Because BPP is closed under complement, this proves BPP ⊆ Σ2 ∩ Π2.

Stronger version[edit]
The theorem can be strengthened to BPP⊆MA⊆S2P⊆Σ2∩Π2𝖡𝖯𝖯⊆𝖬𝖠⊆𝖲_2^P⊆Σ_2∩Π_2 (see MA, SP2).[3][4]

References[edit]

^ Sipser, Michael (1983). "A complexity theoretic approach to randomness". Proceedings of the 15th ACM Symposium on Theory of Computing. ACM Press: 330–335. CiteSeerX 10.1.1.472.8218.

^ a b Lautemann, Clemens (1983). "BPP and the polynomial hierarchy". Inf. Proc. Lett. 17. 17 (4): 215–217. doi:10.1016/0020-0190(83)90044-3.

^ Canetti, Ran (1996). "More on BPP and the polynomial-time hierarchy". Information Processing Letters. 57 (5): 237–241. doi:10.1016/0020-0190(96)00016-6.

^ Russell, Alexander; Sundaram, Ravi (1998). "Symmetric alternation captures BPP". Computational Complexity. 7 (2): 152–162. CiteSeerX 10.1.1.219.3028. doi:10.1007/s000370050007. ISSN 1016-3328. S2CID 15331219.






Definitions: An alphabet is any finite set of symbols, which may be thought of as the states of the cells in a cellular automaton. A configuration is a bi-infinite sequence of symbols from the alphabet: ..., x−2, x−1, x0, x1, x2, .... A position in a configuration is an integer, the index of one of the symbols in the sequence; the positions may be thought of as the cells of a cellular automaton. A pattern is a finite set of positions and an assignment of symbols to each of these positions. The shift space is the set of all possible configurations over a given alphabet. It may be given the structure of a topological space according to the Cantor topology, in which the fundamental open sets are the sets of configurations that match any single pattern and the open sets are arbitrary unions of fundamental open sets. In this topology, a function f from configurations to configurations is continuous if, for any fixed pattern p defining a fundamental open set P, the set f−1(P) of configurations mapped by f into P can itself be described by a (possibly infinite) set S of patterns, with the property that a configuration belongs to f−1(P) if and only if it matches a pattern in S. The shift map is a particular continuous function s on the shift space that transforms a configuration x into a new configuration y in which each symbol is shifted one position over from its previous position: that is, for every integer i, yi = xi − 1. A function f is equivariant under the shift map if the transformation on configurations described by f commutes with the shift map; that is, for every configuration x, it must be the case that f(s(x)) = s(f(x)). Intuitively, this means that every position of the configuration is updated by f using the same rule as every other position. A cellular automaton is defined by a rule for computing the new value of each position in a configuration based only on the values of cells in a prior-fixed finite neighborhood surrounding the position, with all positions of the configuration being updated simultaneously based on the same update rule. That is, the new value of a position is a function only of the values of the cells in its neighborhood rather than depending more generally on an unbounded number of cells of the previous configuration. The function f that uses this rule to map a configuration of the cellular automaton into its successor configuration is necessarily equivariant with respect to the shift map, by the assumption that all positions use the same update rule. It is also necessarily continuous in the Cantor topology: if p is a fixed pattern, defining a fundamental open set P, then f−1(P) is defined by a finite set of patterns, the assignments to cells in the neighborhood of p that cause f to produce p. The Curtis–Hedlund–Lyndon theorem states that these two properties are sufficient to define cellular automata: every continuous equivariant function is the update rule of a cellular automaton.
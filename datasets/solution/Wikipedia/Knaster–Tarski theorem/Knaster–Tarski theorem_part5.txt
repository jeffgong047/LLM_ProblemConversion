fixed-point: Chang, Lyuu and Ti[7] present an algorithm for finding a Tarski fixed-point in a totally-ordered lattice, when the order-preserving function is given by a value oracle. Their algorithm requires O(log⁡L)() queries, where L is the number of elements in the lattice. In contrast, for a general lattice (given as an oracle), they prove a lower bound of Ω(L)Ω(L) queries. Deng, Qi and Ye[8] present several algorithms for finding a Tarski fixed-point. They consider two kinds of lattices: componentwise ordering and lexicographic ordering. They consider two kinds of input for the function f: value oracle, or a polynomial function. Their algorithms have the following runtime complexity (where d is the number of dimensions, and Ni is the number of elements in dimension i): Lattice v input > Polynomial function Value oracle Componentwise O(poly(log⁡L)⋅log⁡N1⋯log⁡Nd)(poly()·_1⋯_d) O(log⁡N1⋯log⁡Nd)≈O(logd⁡L)(_1⋯_d)(log^dL) Lexicographic O(poly(log⁡L)⋅log⁡L)(poly()·) O(log⁡L)() The algorithms are based on binary search. On the other hand, determining whether a given fixed point is unique is computationally hard: Lattice v input > Polynomial function Value oracle Componentwise coNP-complete Θ(N1+⋯+Nd)Θ(N_1+⋯+N_d) Lexicographic coNP-complete Θ(L)Θ(L) For d=2, for componentwise lattice and a value-oracle, the complexity of O(log2⁡L)(log^2L)is optimal.[9] But for d>2, there are faster algorithms: Fearnley, Palvolgyi and Savani[10] presented an algorithm using only O(log2⌈d/3⌉⁡L)(log^2/3⌉L) queries. In particular, for d=3, only O(log2⁡L)(log^2L) queries are needed. Chen and Li[11] presented an algorithm using only O(log⌈(d+1)/2⌉⁡L)(log^⌈(d+1)/2⌉L) queries. Application in game
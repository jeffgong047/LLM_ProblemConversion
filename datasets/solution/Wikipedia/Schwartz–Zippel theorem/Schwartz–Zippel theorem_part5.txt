polynomials: Given a pair of polynomials p1(x)_1(x) and p2(x)_2(x), is p1(x)≡p2(x)_1(x)_2(x)? This problem can be solved by reducing it to the problem of polynomial identity testing. It is equivalent to checking if [p1(x)−p2(x)]≡0.[p_1(x)-p_2(x)]≡0. Hence if we can determine that p(x)≡0,(x)≡0, where p(x)=p1(x)−p2(x),(x)=p_1(x) - p_2(x), then we can determine whether the two polynomials are equivalent. Comparison of polynomials has applications for branching programs (also called binary decision diagrams). A read-once branching program can be represented by a multilinear polynomial which computes (over any field) on {0,1}-inputs the same Boolean function as the branching program, and two branching programs compute the same function if and only if the corresponding polynomials are equal. Thus, identity of Boolean functions computed by read-once branching programs can be reduced to polynomial identity testing. Comparison of two polynomials (and therefore testing polynomial identities) also has applications in 2D-compression, where the problem of finding the equality of two 2D-texts A and B is reduced to the problem of comparing equality of two polynomials pA(x,y)_A(x,y) and pB(x,y)_B(x,y). Primality
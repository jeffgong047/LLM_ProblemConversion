form: The master theorem always yields asymptotically tight bounds to recurrences from divide and conquer algorithms that partition an input into smaller subproblems of equal sizes, solve the subproblems recursively, and then combine the subproblem solutions to give a solution to the original problem. The time for such an algorithm can be expressed by adding the work that they perform at the top level of their recursion (to divide the problems into subproblems and then combine the subproblem solutions) together with the time made in the recursive calls of the algorithm. If T(n)(n) denotes the total time for the algorithm on an input of size n, and f(n)(n) denotes the amount of time taken at the top level of the recurrence then the time can be expressed by a recurrence relation that takes the form: T(n)=aT(nb)+f(n)(n)=a T(n/b)+f(n) Here n is the size of an input problem, a is the number of subproblems in the recursion, and b is the factor by which the subproblem size is reduced in each recursive call (b>1). Crucially, a and b must not depend on n. The theorem below also assumes that, as a base case for the recurrence, T(n)=Θ(1)(n)=Θ(1) when n is less than some bound κ>0κ>0, the smallest input size that will lead to a recursive call. Recurrences of this form often satisfy one of the three following regimes, based on how the work to split/recombine the problem f(n)(n) relates to the critical exponent ccrit=logb⁡a_crit=log_ba. (The table below uses standard big O notation). ccrit=logb⁡a=log⁡(#subproblems)/log⁡(relativesubproblemsize)_crit=log_ba=log(#subproblems)/log(relativesubproblemsize) Case Description Condition on f(n)(n) in relation to ccrit_crit, i.e. logb⁡alog_ba Master Theorem bound Notational examples 1 Work to split/recombine a problem is dwarfed by subproblems. i.e. the recursion tree is leaf-heavy When f(n)=O(nc)(n)=O(n^c) where c<ccrit<c_crit (upper-bounded by a lesser exponent polynomial) ... then T(n)=Θ(nccrit)(n)=Θ(n^c_crit) (The splitting term does not appear; the recursive tree structure dominates.) If b=a2=a^2 and f(n)=O(n1/2−ϵ)(n)=O(n^1/2-ϵ), then T(n)=Θ(n1/2)(n)=Θ(n^1/2). 2 Work to split/recombine a problem is comparable to subproblems. When f(n)=Θ(nccritlogk⁡n)(n)=Θ(n^c_critlog^kn) for a k≥0≥0 (rangebound by the critical-exponent polynomial, times zero or more optional loglogs) ... then T(n)=Θ(nccritlogk+1⁡n)(n)=Θ(n^c_critlog^k+1n) (The bound is the splitting term, where the log is augmented by a single power.) If b=a2=a^2 and f(n)=Θ(n1/2)(n)=Θ(n^1/2), then T(n)=Θ(n1/2log⁡n)(n)=Θ(n^1/2). If b=a2=a^2 and f(n)=Θ(n1/2log⁡n)(n)=Θ(n^1/2), then T(n)=Θ(n1/2log2⁡n)(n)=Θ(n^1/2log^2n). 3 Work to split/recombine a problem dominates subproblems. i.e. the recursion tree is root-heavy. When f(n)=Ω(nc)(n)=Ω(n^c) where c>ccrit>c_crit (lower-bounded by a greater-exponent polynomial) ... this doesn't necessarily yield anything. Furthermore, if af(nb)≤kf(n)(n/b)(n) for some constant k<1<1 and sufficiently large n (often called the regularity condition) then the total is dominated by the splitting term f(n)(n): T(n)=Θ(f(n))(n)=Θ(f(n)) If b=a2=a^2 and f(n)=Ω(n1/2+ϵ)(n)=Ω(n^1/2+ϵ) and the regularity condition holds, then T(n)=Θ(f(n))(n)=Θ(f(n)). A useful extension of Case 2 handles all values of k:[3] Case Condition on f(n)(n) in relation to ccrit_crit, i.e. logb⁡alog_ba Master Theorem bound Notational examples 2a When f(n)=Θ(nccritlogk⁡n)(n)=Θ(n^c_critlog^kn) for any k>−1>-1 ... then T(n)=Θ(nccritlogk+1⁡n)(n)=Θ(n^c_critlog^k+1n) (The bound is the splitting term, where the log is augmented by a single power.) If b=a2=a^2 and f(n)=Θ(n1/2/log1/2⁡n)(n)=Θ(n^1/2/log^1/2n), then T(n)=Θ(n1/2log1/2⁡n)(n)=Θ(n^1/2log^1/2n). 2b When f(n)=Θ(nccritlogk⁡n)(n)=Θ(n^c_critlog^kn) for k=−1=-1 ... then T(n)=Θ(nccritlog⁡log⁡n)(n)=Θ(n^c_critlog) (The bound is the splitting term, where the log reciprocal is replaced by an iterated log.) If b=a2=a^2 and f(n)=Θ(n1/2/log⁡n)(n)=Θ(n^1/2/), then T(n)=Θ(n1/2log⁡log⁡n)(n)=Θ(n^1/2log). 2c When f(n)=Θ(nccritlogk⁡n)(n)=Θ(n^c_critlog^kn) for any k<−1<-1 ... then T(n)=Θ(nccrit)(n)=Θ(n^c_crit) (The bound is the splitting term, where the log disappears.) If b=a2=a^2 and f(n)=Θ(n1/2/log2⁡n)(n)=Θ(n^1/2/log^2n), then T(n)=Θ(n1/2)(n)=Θ(n^1/2).
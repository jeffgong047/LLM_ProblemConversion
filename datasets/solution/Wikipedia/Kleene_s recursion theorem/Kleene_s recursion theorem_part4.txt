theorem: The proof uses a particular total computable function h, defined as follows. Given a natural number x, the function h outputs the index of the partial computable function that performs the following computation: Given an input y, first attempt to compute φx(x)φ_x(x). If that computation returns an output e, then compute φe(y)φ_e(y) and return its value, if any. Thus, for all indices x of partial computable functions, if φx(x)φ_x(x) is defined, then φh(x)≃φφx(x)φ_h(x)≃φ_φ_x(x). If φx(x)φ_x(x) is not defined, then φh(x)φ_h(x) is a function that is nowhere defined. The function h can be constructed from the partial computable function g(x,y)(x,y) described above and the s-m-n theorem: for each x, h(x)(x) is the index of a program which computes the function y↦g(x,y)(x,y). To complete the proof, let F be any total computable function, and construct h as above. Let e be an index of the composition F∘h, which is a total computable function. Then φh(e)≃φφe(e)φ_h(e)≃φ_φ_e(e) by the definition of h. But, because e is an index of F∘h, φe(e)=(F∘h)(e)φ_e(e)=(F)(e), and thus φφe(e)≃φF(h(e))φ_φ_e(e)≃φ_F(h(e)). By the transitivity of ≃≃, this means φh(e)≃φF(h(e))φ_h(e)≃φ_F(h(e)). Hence φn≃φF(n)φ_n≃φ_F(n) for n=h(e)=h(e). This proof is a construction of a partial recursive function which implements the Y combinator. Fixed-point-free
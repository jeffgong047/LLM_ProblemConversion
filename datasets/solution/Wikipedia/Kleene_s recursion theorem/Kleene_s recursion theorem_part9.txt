recursion: Suppose that g and h are total computable functions that are used in a recursive definition for a function f: f(0,y)≃g(y),(0,y)(y), f(x+1,y)≃h(f(x,y),x,y),(x+1,y)(f(x,y),x,y), The second recursion theorem can be used to show that such equations define a computable function, where the notion of computability does not have to allow, prima facie, for recursive definitions (for example, it may be defined by μ-recursion, or by Turing machines). This recursive definition can be converted into a computable function φF(e,x,y)φ_F(e,x,y) that assumes e is an index to itself, to simulate recursion: φF(e,0,y)≃g(y),φ_F(e,0,y)(y), φF(e,x+1,y)≃h(φe(x,y),x,y).φ_F(e,x+1,y)(φ_e(x,y),x,y). The recursion theorem establishes the existence of a computable function φfφ_f such that φf(x,y)≃φF(f,x,y)φ_f(x,y)≃φ_F(f,x,y). Thus f satisfies the given recursive definition. Reflexive
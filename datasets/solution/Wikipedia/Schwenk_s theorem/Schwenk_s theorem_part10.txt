solutions: Closed knight's tour on a 24 × 24 board solved by a neural network The knight's tour problem also lends itself to being solved by a neural network implementation.[26] The network is set up such that every legal knight's move is represented by a neuron, and each neuron is initialized randomly to be either "active" or "inactive" (output of 1 or 0), with 1 implying that the neuron is part of the solution. Each neuron also has a state function (described below) which is initialized to 0. When the network is allowed to run, each neuron can change its state and output based on the states and outputs of its neighbors (those exactly one knight's move away) according to the following transition rules: Ut+1(Ni,j)=Ut(Ni,j)+2−∑N∈G(Ni,j)Vt(N)_t+1(N_i,j)=U_t(N_i,j)+2-∑_N(N_i,j)V_t(N) Vt+1(Ni,j)=1ifUt+1(Ni,j)>30ifUt+1(Ni,j)<0Vt(Ni,j)otherwise,_t+1(N_i,j)={[ 1 U_t+1(N_i,j)>3; 0 U_t+1(N_i,j)<0; V_t(N_i,j) , ]. where t represents discrete intervals of time, U(Ni,j)(N_i,j) is the state of the neuron connecting square i to square j, V(Ni,j)(N_i,j) is the output of the neuron from i to j, and G(Ni,j)(N_i,j) is the set of neighbors of the neuron. Although divergent cases are possible, the network should eventually converge, which occurs when no neuron changes its state from time t to t+1+1. When the network converges, either the network encodes a knight's tour or a series of two or more independent circuits within the same board. See
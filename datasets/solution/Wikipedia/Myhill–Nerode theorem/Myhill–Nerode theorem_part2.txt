Statement: Given a language L, and a pair of strings x and y, define a distinguishing extension to be a string z such that exactly one of the two strings xz and yz belongs to L. Define a relation ∼L∼_L on strings as x∼Ly ∼_L if there is no distinguishing extension for x and y. It is easy to show that ∼L∼_L is an equivalence relation on strings, and thus it divides the set of all strings into equivalence classes. The Myhill–Nerode theorem states that a language L is regular if and only if ∼L∼_L has a finite number of equivalence classes, and moreover, that this number is equal to the number of states in the minimal deterministic finite automaton (DFA) accepting L. Furthermore, every minimal DFA for the language is isomorphic to the canonical one (Hopcroft & Ullman 1979). Myhill, Nerode (1957) — (1) L is regular if and only if ∼L∼_L has a finite number of equivalence classes. (2) This number is equal to the number of states in the minimal deterministic finite automaton (DFA) accepting L. (3) Any minimal DFA acceptor for the language is isomorphic to the following one: Let each equivalence class [x][x] correspond to a state, and let state transitions be a:[x]→[xa]:[x]→[xa] for each a∈Σ∈Σ. Let the starting state be [ϵ][ϵ], and the accepting states be [x][x] where x∈L. Generally, for any language, the constructed automaton is a state automaton acceptor. However, it does not necessarily have finitely many states. The Myhill–Nerode theorem shows that finiteness is necessary and sufficient for language regularity. Some authors refer to the ∼L∼_L relation as Nerode congruence,[1][2] in honor of Anil Nerode. Proof (1) If L is regular. construct a minimal DFA to accept it. Clearly, if x,y,y end up in the same state after running through the DFA, then x∼Ly∼_Ly, thus the number of equivalence classes of ∼L∼_L is at most the number of DFA states, which must be finite. Conversely, if ∼L∼_L has a finite number of equivalence classes, then the state automaton constructed in the theorem is a DFA acceptor, thus the language is regular. (2) By the construction in (1). (3) Given a minimal DFA acceptor A, we construct an isomorphism to the canonical one. Construct the following equivalence relation: x∼Ay∼_Ay if and only if x,y,y end up on the same state when running through A. Since A is an acceptor, if x∼Ay∼_Ay then x∼Ly∼_Ly. Thus each ∼L∼_L equivalence class is a union of one or more equivalence classes of ∼A∼_A. Further, since A is minimal, the number of states of A is equal to the number of equivalence classes of ∼L∼_L by part (2). Thus ∼A=∼L∼_A=∼_L. Now this gives us a bijection between states of A and the states of the canonical acceptor. It is clear that this bijection also preserves the transition rules, thus it is an isomorphism of DFA. Use and
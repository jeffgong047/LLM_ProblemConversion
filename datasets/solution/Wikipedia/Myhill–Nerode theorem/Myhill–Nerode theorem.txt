Necessary and sufficient condition for a formal language to be regular
In the theory of formal languages, the Myhill–Nerode theorem provides a necessary and sufficient condition for a language to be regular. The theorem is named for John Myhill and Anil Nerode, who proved it at the University of Chicago in 1957 (Nerode & Sauer 1957, p. ii).


Statement[edit]
Given a language L, and a pair of strings x and y, define a  distinguishing extension to be a string z such that
exactly one of the two strings xz and yz belongs to L.
Define a relation ∼L∼_L on strings as x∼Ly ∼_L if there is no distinguishing extension for x and y.  It is easy to show that ∼L∼_L is an equivalence relation on strings, and thus it divides the set of all strings into  equivalence classes.
The Myhill–Nerode theorem states that a language L is regular if and only if ∼L∼_L has a finite number of equivalence classes, and moreover, that this number is equal to the number of states in the minimal deterministic finite automaton (DFA) accepting L. Furthermore, every minimal DFA for the language is isomorphic to the canonical one (Hopcroft & Ullman 1979).


Myhill, Nerode (1957) — (1) L is regular if and only if ∼L∼_L has a finite number of equivalence classes.  
(2) This number is equal to the number of states in the minimal deterministic finite automaton (DFA) accepting L.  
(3) Any minimal DFA acceptor for the language is isomorphic to the following one:  

Let each equivalence class [x][x] correspond to a state, and let state transitions be a:[x]→[xa]:[x]→[xa] for each a∈Σ∈Σ. Let the starting state be [ϵ][ϵ], and the accepting states be [x][x] where x∈L.

Generally, for any language, the constructed automaton is a state automaton acceptor. However, it does not necessarily have finitely many states. The Myhill–Nerode theorem shows that finiteness is necessary and sufficient for language regularity.
Some authors refer to the ∼L∼_L relation as Nerode congruence,[1][2] in honor of Anil Nerode.

Proof
(1) If L is regular. construct a minimal DFA to accept it. Clearly, if x,y,y end up in the same state after running through the DFA, then x∼Ly∼_Ly, thus the number of equivalence classes of ∼L∼_L is at most the number of DFA states, which must be finite.  
Conversely, if ∼L∼_L has a finite number of equivalence classes, then the state automaton constructed in the theorem is a DFA acceptor, thus the language is regular.  
(2) By the construction in (1).  
(3) Given a minimal DFA acceptor A, we construct an isomorphism to the canonical one.  
Construct the following equivalence relation: x∼Ay∼_Ay if and only if x,y,y end up on the same state when running through A.
Since A is an acceptor, if x∼Ay∼_Ay then x∼Ly∼_Ly. Thus each ∼L∼_L equivalence class is a union of one or more equivalence classes of ∼A∼_A. Further, since A is minimal, the number of states of A is equal to the number of equivalence classes of ∼L∼_L by part (2). Thus ∼A=∼L∼_A=∼_L.  
Now this gives us a bijection between states of A and the states of the canonical acceptor. It is clear that this bijection also preserves the transition rules, thus it is an isomorphism of DFA.


Use and consequences[edit]
The Myhill–Nerode theorem may be used to show that a language L is regular by proving that the number of equivalence classes of ∼L∼_L is finite. This may be done by an exhaustive case analysis in which, beginning from the empty string, distinguishing extensions are used to find additional equivalence classes until no more can be found. For example, the language consisting of binary representations of numbers that can be divided by 3 is regular. Given the empty string, 0000 (or 1111), 0101, and 1010 are distinguishing extensions resulting in the three classes (corresponding to numbers that give remainders 0, 1 and 2 when divided by 3), but after this step there is no distinguishing extension anymore. The minimal automaton accepting our language would have three states corresponding to these three equivalence classes.
Another immediate corollary of the theorem is that if for a language L the relation ∼L∼_L has infinitely many equivalence classes, it is not regular.  It is this corollary that is frequently used to prove that a language is not regular.

Generalizations[edit]
The Myhill–Nerode theorem can be generalized to tree automata.[3]

See also[edit]
Pumping lemma for regular languages, an alternative method for proving that a language is not regular. The pumping lemma may not always be able to prove that a language is not regular.
Syntactic monoid
References[edit]


^ Brzozowski, Janusz; Szykuła, Marek; Ye, Yuli (2018), "Syntactic Complexity of Regular Ideals", Theory of Computing Systems, 62 (5): 1175–1202, doi:10.1007/s00224-017-9803-8, hdl:10012/12499, S2CID 2238325

^ Crochemore, Maxime; et al. (2009), "From Nerode's congruence to suffix automata with mismatches", Theoretical Computer Science, 410 (37): 3471–3480, doi:10.1016/j.tcs.2009.03.011, S2CID 14277204

^ Hubert Comon; Max Dauchet; Rémi Gilleron; Florent Jacquemard; Denis Lugiez; Christoph Löding; Sophie Tison; Marc Tommasi (Oct 2021). Tree Automata Techniques and Applications (TATA). Here: Sect. 1.5, p.35-36.


Hopcroft, John E.; Ullman, Jeffrey D. (1979), "Chapter 3.4", Introduction to Automata Theory, Languages, and Computation, Reading, Massachusetts: Addison-Wesley Publishing, ISBN 0-201-02988-X.
Nerode, Anil (1958), "Linear Automaton Transformations", Proceedings of the American Mathematical Society, 9 (4): 541–544, doi:10.1090/S0002-9939-1958-0135681-9, JSTOR 2033204.
Nerode, Anil; Sauer, Burton P. (Nov 1957), Fundamental Concepts in the Theory of Systems (WADC Technical Report), Wright Air Development Center. ASTIA Document No. AD 155741.
Regan, Kenneth (2007), Notes on the Myhill-Nerode Theorem (PDF), retrieved 2016-03-22.
Further reading[edit]
Bakhadyr Khoussainov; Anil Nerode (6 December 2012). Automata Theory and its Applications. Springer Science & Business Media. ISBN 978-1-4612-0171-7.



